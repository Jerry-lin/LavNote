<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.hust.mapper.NotesMapper">
  <resultMap id="BaseResultMap" type="cn.edu.hust.domain.Notes">
    <id column="id" jdbcType="CHAR" property="id" />
    <result column="notebook_id" jdbcType="CHAR" property="notebook_id" />
    <result column="version_id" jdbcType="CHAR" property="version_id" />
    <result column="created_at" jdbcType="TIMESTAMP" property="created_at" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updated_at" />
    <result column="deleted_at" jdbcType="TIMESTAMP" property="deleted_at" />
  </resultMap>
  <sql id="Base_Column_List">
    id, notebook_id, version_id, created_at, updated_at, deleted_at
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from notes
    where id = #{id,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from notes
    where id = #{id,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="cn.edu.hust.domain.Notes">
    insert into notes (id, notebook_id, version_id, 
      created_at, updated_at, deleted_at
      )
    values (#{id,jdbcType=CHAR}, #{notebook_id,jdbcType=CHAR}, #{version_id,jdbcType=CHAR}, 
      #{created_at,jdbcType=TIMESTAMP}, #{updated_at,jdbcType=TIMESTAMP}, #{deleted_at,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.hust.domain.Notes">
    insert into notes
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="notebook_id != null">
        notebook_id,
      </if>
      <if test="version_id != null">
        version_id,
      </if>
      <if test="created_at != null">
        created_at,
      </if>
      <if test="updated_at != null">
        updated_at,
      </if>
      <if test="deleted_at != null">
        deleted_at,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=CHAR},
      </if>
      <if test="notebook_id != null">
        #{notebook_id,jdbcType=CHAR},
      </if>
      <if test="version_id != null">
        #{version_id,jdbcType=CHAR},
      </if>
      <if test="created_at != null">
        #{created_at,jdbcType=TIMESTAMP},
      </if>
      <if test="updated_at != null">
        #{updated_at,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted_at != null">
        #{deleted_at,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.hust.domain.Notes">
    update notes
    <set>
      <if test="notebook_id != null">
        notebook_id = #{notebook_id,jdbcType=CHAR},
      </if>
      <if test="version_id != null">
        version_id = #{version_id,jdbcType=CHAR},
      </if>
      <if test="created_at != null">
        created_at = #{created_at,jdbcType=TIMESTAMP},
      </if>
      <if test="updated_at != null">
        updated_at = #{updated_at,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted_at != null">
        deleted_at = #{deleted_at,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.hust.domain.Notes">
    update notes
    set notebook_id = #{notebook_id,jdbcType=CHAR},
      version_id = #{version_id,jdbcType=CHAR},
      created_at = #{created_at,jdbcType=TIMESTAMP},
      updated_at = #{updated_at,jdbcType=TIMESTAMP},
      deleted_at = #{deleted_at,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=CHAR}
  </update>

  <select id="findNotesListByNBId" resultMap="BaseResultMap">
    SELECT *
    FROM notes
    WHERE notebook_id in
    <foreach item="item" index="index" collection="noteBookIds"
             open="(" separator="," close=")">
      #{item}
    </foreach>
  </select>
</mapper>