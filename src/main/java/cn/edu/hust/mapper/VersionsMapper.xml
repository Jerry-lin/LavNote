<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.hust.mapper.VersionsMapper">
  <resultMap id="BaseResultMap" type="cn.edu.hust.domain.Versions">
    <id column="id" jdbcType="CHAR" property="id" />
    <result column="previous_id" jdbcType="CHAR" property="previous_id" />
    <result column="next_id" jdbcType="CHAR" property="next_id" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="content_preview" jdbcType="VARCHAR" property="content_preview" />
    <result column="created_at" jdbcType="TIMESTAMP" property="created_at" />
    <result column="updated_at" jdbcType="TIMESTAMP" property="updated_at" />
    <result column="deleted_at" jdbcType="TIMESTAMP" property="deleted_at" />
    <result column="user_id" jdbcType="CHAR" property="user_id" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.edu.hust.domain.Versions">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Base_Column_List">
    id, previous_id, next_id, title, content_preview, created_at, updated_at, deleted_at, 
    user_id
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from versions
    where id = #{id,jdbcType=CHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from versions
    where id = #{id,jdbcType=CHAR}
  </delete>
  <insert id="insert" parameterType="cn.edu.hust.domain.Versions">
    insert into versions (id, previous_id, next_id, 
      title, content_preview, created_at, 
      updated_at, deleted_at, user_id, 
      content)
    values (#{id,jdbcType=CHAR}, #{previous_id,jdbcType=CHAR}, #{next_id,jdbcType=CHAR}, 
      #{title,jdbcType=VARCHAR}, #{content_preview,jdbcType=VARCHAR}, #{created_at,jdbcType=TIMESTAMP}, 
      #{updated_at,jdbcType=TIMESTAMP}, #{deleted_at,jdbcType=TIMESTAMP}, #{user_id,jdbcType=CHAR}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.hust.domain.Versions">
    insert into versions
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="previous_id != null">
        previous_id,
      </if>
      <if test="next_id != null">
        next_id,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="content_preview != null">
        content_preview,
      </if>
      <if test="created_at != null">
        created_at,
      </if>
      <if test="updated_at != null">
        updated_at,
      </if>
      <if test="deleted_at != null">
        deleted_at,
      </if>
      <if test="user_id != null">
        user_id,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=CHAR},
      </if>
      <if test="previous_id != null">
        #{previous_id,jdbcType=CHAR},
      </if>
      <if test="next_id != null">
        #{next_id,jdbcType=CHAR},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="content_preview != null">
        #{content_preview,jdbcType=VARCHAR},
      </if>
      <if test="created_at != null">
        #{created_at,jdbcType=TIMESTAMP},
      </if>
      <if test="updated_at != null">
        #{updated_at,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted_at != null">
        #{deleted_at,jdbcType=TIMESTAMP},
      </if>
      <if test="user_id != null">
        #{user_id,jdbcType=CHAR},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.hust.domain.Versions">
    update versions
    <set>
      <if test="previous_id != null">
        previous_id = #{previous_id,jdbcType=CHAR},
      </if>
      <if test="next_id != null">
        next_id = #{next_id,jdbcType=CHAR},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="content_preview != null">
        content_preview = #{content_preview,jdbcType=VARCHAR},
      </if>
      <if test="created_at != null">
        created_at = #{created_at,jdbcType=TIMESTAMP},
      </if>
      <if test="updated_at != null">
        updated_at = #{updated_at,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted_at != null">
        deleted_at = #{deleted_at,jdbcType=TIMESTAMP},
      </if>
      <if test="user_id != null">
        user_id = #{user_id,jdbcType=CHAR},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.edu.hust.domain.Versions">
    update versions
    set previous_id = #{previous_id,jdbcType=CHAR},
      next_id = #{next_id,jdbcType=CHAR},
      title = #{title,jdbcType=VARCHAR},
      content_preview = #{content_preview,jdbcType=VARCHAR},
      created_at = #{created_at,jdbcType=TIMESTAMP},
      updated_at = #{updated_at,jdbcType=TIMESTAMP},
      deleted_at = #{deleted_at,jdbcType=TIMESTAMP},
      user_id = #{user_id,jdbcType=CHAR},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=CHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.hust.domain.Versions">
    update versions
    set previous_id = #{previous_id,jdbcType=CHAR},
      next_id = #{next_id,jdbcType=CHAR},
      title = #{title,jdbcType=VARCHAR},
      content_preview = #{content_preview,jdbcType=VARCHAR},
      created_at = #{created_at,jdbcType=TIMESTAMP},
      updated_at = #{updated_at,jdbcType=TIMESTAMP},
      deleted_at = #{deleted_at,jdbcType=TIMESTAMP},
      user_id = #{user_id,jdbcType=CHAR}
    where id = #{id,jdbcType=CHAR}
  </update>
</mapper>